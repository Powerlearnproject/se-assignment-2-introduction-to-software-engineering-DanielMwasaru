Software engineering is the process of designing, creating, testing, and maintaining software applications by using principles of engineering.
Software engineering is the process of designing, building, testing, and maintaining software to ensure it works well and meets users' needs while traditional programming is just the act of writing code to create software programs. 
Phases of software development life cycle are; First is the Requirements which is gathering data on user needs and system requirements. Second comes Design which means designing how the software architecture and user interphase will look like. Third is the implementation which is writing the code and building the software. Fourth is testing the software to see if it works the way it is supposed to. Fifth is Deployment which is releasing the software to users. Lastly, there is maintenance which involves fixing bugs and providing updates.
 Agile is focused on flexibility, collaboration and responding to change. It is preferred in long term proects where the user needs are subject to change while Waterfall follows a strict sequence of stages which are requirement analysis, design, implementation, testing, deployment, and maintenance. It is preferred in short term projects.
 Requirements engineering is the process of identifying, documenting, and managing the needs of users for a software project. It involves gathering requirements, analyzing them for feasibility, documenting them , validating them with stakeholders, and continuously managing changes. This process is important in the software development lifecycle because it ensures that the final product meets user needs, provides clear direction for developers, controls project scope and reduces risks leading to higher quality software.
 Modularity in software design is the breaking a large system into smaller independent modules each handling a specific function. This approach improves maintainability by making updates, debugging, and understanding the system easier making software systems more manageable, adaptable and efficient.
 Unit testing is usually done to check individual components, integration testing test how those components work together, system testing is done to ensure the entire software system functions correctly, and finally acceptance testing to verify that it meets user requirements. Testing is important because it helps identify defects early, reduces risks, ensures user satisfaction, saves costs, and facilitates continuous improvement of the software.
 Version control systems are tools that track changes made to files and documents over time enabling multiple developers to collaborate on a project by managing different versions of the files and tracking who made changes. They are important as they facilitate collaboration, track changes, allow for experimentation with new features, and ensure the stability and reliability of the software. Popular examples include Git which offers distributed version control with branching and merging capabilities, Subversion (SVN) known for its simplicity and centralized storage and Mercurial (Hg) another distributed system with similar features to Git.
 A software project manager is an overseer guiding the team through the software development process. They plan project goals, coordinate tasks, communicate with team members and clients, manage risks, budgets, and ensure quality. Challenges in managing software projects include include resource allocation, timeline management like dealing with delays, risk mitigation and team dynamics like managing conflicts.
 Software maintenance is the updating of deployed software to ensure it remains effective and meets user needs. This includes fixing bugs, adapting to new requirements, enhancing features and preventing issues. Maintenance activities include corrective(Fixing bugs), adaptive(Ensuring it meets evolving needs), perfective(Improving features), and preventive measures(Fixing potential issues). Maintenance is essential for reliability, adaptability, protection of investment, performance optimization, and security of software throughout its lifecycle, ensuring it continues to meet user needs and deliver value over time.
 Ethical issues include privacy concerns, intellectual property violations, security breaches, and misuse of technology. To ensure adherence to ethical standards they should follow industry guidelines, consider the impact of their work on users and society, prioritize user privacy, respect intellectual property rights, prioritize security, and advocate for ethical practices within their teams and organizations. By doing so software engineers can contribute to building a more responsible technology industry.